name: Check Gotify Releases

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    name: Check Gotify RSS & Build if New

    env:
      GOTIFY_REPO: gotify/server

    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xmlstarlet golang make git

      - name: Fetch latest Gotify version from RSS
        id: get_version
        run: |
          RSS_URL="https://github.com/${{ env.GOTIFY_REPO }}/releases.atom"
          LATEST_URL=$(curl -s "$RSS_URL" | xmlstarlet sel -N a="http://www.w3.org/2005/Atom" \
            -t -m "/a:feed/a:entry[1]/a:link[@rel='alternate']" -v "@href" -n)
          echo "Latest release URL: $LATEST_URL"
          LATEST_TAG=$(echo "$LATEST_URL" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="latest-gotify-${VERSION}"
          echo "Checking for release: $TAG_NAME"

          EXISTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME | jq -r .tag_name)

          if [[ "$EXISTS" == "$TAG_NAME" ]]; then
            echo "Release already exists"
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist"
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker (buildx)
        if: steps.check_release.outputs.skip_build == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build Gotify Plugin
        if: steps.check_release.outputs.skip_build == 'false'
        run: |
          export GOTIFY_VERSION="${{ steps.get_version.outputs.version }}"
          export GOMODCACHE=$(pwd)/.gomodcache
          export GOPATH=$(pwd)/.gopath
          export PATH=$PATH:$GOPATH/bin

          make -e build

          mkdir -p build-output
          cp build/*.so build-output/

      - name: Compute Checksums
        if: steps.check_release.outputs.skip_build == 'false'
        run: |
          cd build-output
          for f in *.so; do
            md5sum "$f" > "$f.md5"
            sha1sum "$f" > "$f.sha1"
            sha256sum "$f" > "$f.sha256"
            sha512sum "$f" > "$f.sha512"
          done

      - name: Publish GitHub Release
        if: steps.check_release.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-gotify-${{ steps.get_version.outputs.version }}
          name: "MQTT for Gotify ${{ steps.get_version.outputs.version }}"
          body: "Automated plugin release for Gotify version ${{ steps.get_version.outputs.version }}."
          files: |
            build-output/*.so
            build-output/*.md5
            build-output/*.sha*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}